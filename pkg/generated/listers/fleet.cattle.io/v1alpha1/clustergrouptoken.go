/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterGroupTokenLister helps list ClusterGroupTokens.
type ClusterGroupTokenLister interface {
	// List lists all ClusterGroupTokens in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterGroupToken, err error)
	// ClusterGroupTokens returns an object that can list and get ClusterGroupTokens.
	ClusterGroupTokens(namespace string) ClusterGroupTokenNamespaceLister
	ClusterGroupTokenListerExpansion
}

// clusterGroupTokenLister implements the ClusterGroupTokenLister interface.
type clusterGroupTokenLister struct {
	indexer cache.Indexer
}

// NewClusterGroupTokenLister returns a new ClusterGroupTokenLister.
func NewClusterGroupTokenLister(indexer cache.Indexer) ClusterGroupTokenLister {
	return &clusterGroupTokenLister{indexer: indexer}
}

// List lists all ClusterGroupTokens in the indexer.
func (s *clusterGroupTokenLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterGroupToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterGroupToken))
	})
	return ret, err
}

// ClusterGroupTokens returns an object that can list and get ClusterGroupTokens.
func (s *clusterGroupTokenLister) ClusterGroupTokens(namespace string) ClusterGroupTokenNamespaceLister {
	return clusterGroupTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterGroupTokenNamespaceLister helps list and get ClusterGroupTokens.
type ClusterGroupTokenNamespaceLister interface {
	// List lists all ClusterGroupTokens in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterGroupToken, err error)
	// Get retrieves the ClusterGroupToken from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterGroupToken, error)
	ClusterGroupTokenNamespaceListerExpansion
}

// clusterGroupTokenNamespaceLister implements the ClusterGroupTokenNamespaceLister
// interface.
type clusterGroupTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterGroupTokens in the indexer for a given namespace.
func (s clusterGroupTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterGroupToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterGroupToken))
	})
	return ret, err
}

// Get retrieves the ClusterGroupToken from the indexer for a given namespace and name.
func (s clusterGroupTokenNamespaceLister) Get(name string) (*v1alpha1.ClusterGroupToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustergrouptoken"), name)
	}
	return obj.(*v1alpha1.ClusterGroupToken), nil
}
