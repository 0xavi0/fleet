/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterGroupLister helps list ClusterGroups.
type ClusterGroupLister interface {
	// List lists all ClusterGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterGroup, err error)
	// ClusterGroups returns an object that can list and get ClusterGroups.
	ClusterGroups(namespace string) ClusterGroupNamespaceLister
	ClusterGroupListerExpansion
}

// clusterGroupLister implements the ClusterGroupLister interface.
type clusterGroupLister struct {
	indexer cache.Indexer
}

// NewClusterGroupLister returns a new ClusterGroupLister.
func NewClusterGroupLister(indexer cache.Indexer) ClusterGroupLister {
	return &clusterGroupLister{indexer: indexer}
}

// List lists all ClusterGroups in the indexer.
func (s *clusterGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterGroup))
	})
	return ret, err
}

// ClusterGroups returns an object that can list and get ClusterGroups.
func (s *clusterGroupLister) ClusterGroups(namespace string) ClusterGroupNamespaceLister {
	return clusterGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterGroupNamespaceLister helps list and get ClusterGroups.
type ClusterGroupNamespaceLister interface {
	// List lists all ClusterGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterGroup, err error)
	// Get retrieves the ClusterGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterGroup, error)
	ClusterGroupNamespaceListerExpansion
}

// clusterGroupNamespaceLister implements the ClusterGroupNamespaceLister
// interface.
type clusterGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterGroups in the indexer for a given namespace.
func (s clusterGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterGroup))
	})
	return ret, err
}

// Get retrieves the ClusterGroup from the indexer for a given namespace and name.
func (s clusterGroupNamespaceLister) Get(name string) (*v1alpha1.ClusterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustergroup"), name)
	}
	return obj.(*v1alpha1.ClusterGroup), nil
}
