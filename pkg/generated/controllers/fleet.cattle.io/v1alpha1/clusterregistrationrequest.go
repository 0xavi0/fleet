/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	clientset "github.com/rancher/fleet/pkg/generated/clientset/versioned/typed/fleet.cattle.io/v1alpha1"
	informers "github.com/rancher/fleet/pkg/generated/informers/externalversions/fleet.cattle.io/v1alpha1"
	listers "github.com/rancher/fleet/pkg/generated/listers/fleet.cattle.io/v1alpha1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ClusterRegistrationRequestHandler func(string, *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error)

type ClusterRegistrationRequestController interface {
	generic.ControllerMeta
	ClusterRegistrationRequestClient

	OnChange(ctx context.Context, name string, sync ClusterRegistrationRequestHandler)
	OnRemove(ctx context.Context, name string, sync ClusterRegistrationRequestHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterRegistrationRequestCache
}

type ClusterRegistrationRequestClient interface {
	Create(*v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error)
	Update(*v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error)
	UpdateStatus(*v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ClusterRegistrationRequest, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.ClusterRegistrationRequestList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterRegistrationRequest, err error)
}

type ClusterRegistrationRequestCache interface {
	Get(namespace, name string) (*v1alpha1.ClusterRegistrationRequest, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.ClusterRegistrationRequest, error)

	AddIndexer(indexName string, indexer ClusterRegistrationRequestIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.ClusterRegistrationRequest, error)
}

type ClusterRegistrationRequestIndexer func(obj *v1alpha1.ClusterRegistrationRequest) ([]string, error)

type clusterRegistrationRequestController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ClusterRegistrationRequestsGetter
	informer          informers.ClusterRegistrationRequestInformer
	gvk               schema.GroupVersionKind
}

func NewClusterRegistrationRequestController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ClusterRegistrationRequestsGetter, informer informers.ClusterRegistrationRequestInformer) ClusterRegistrationRequestController {
	return &clusterRegistrationRequestController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromClusterRegistrationRequestHandlerToHandler(sync ClusterRegistrationRequestHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.ClusterRegistrationRequest
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.ClusterRegistrationRequest))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *clusterRegistrationRequestController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.ClusterRegistrationRequest))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateClusterRegistrationRequestDeepCopyOnChange(client ClusterRegistrationRequestClient, obj *v1alpha1.ClusterRegistrationRequest, handler func(obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error)) (*v1alpha1.ClusterRegistrationRequest, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *clusterRegistrationRequestController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *clusterRegistrationRequestController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *clusterRegistrationRequestController) OnChange(ctx context.Context, name string, sync ClusterRegistrationRequestHandler) {
	c.AddGenericHandler(ctx, name, FromClusterRegistrationRequestHandlerToHandler(sync))
}

func (c *clusterRegistrationRequestController) OnRemove(ctx context.Context, name string, sync ClusterRegistrationRequestHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromClusterRegistrationRequestHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *clusterRegistrationRequestController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *clusterRegistrationRequestController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *clusterRegistrationRequestController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *clusterRegistrationRequestController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *clusterRegistrationRequestController) Cache() ClusterRegistrationRequestCache {
	return &clusterRegistrationRequestCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *clusterRegistrationRequestController) Create(obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error) {
	return c.clientGetter.ClusterRegistrationRequests(obj.Namespace).Create(context.TODO(), obj, metav1.CreateOptions{})
}

func (c *clusterRegistrationRequestController) Update(obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error) {
	return c.clientGetter.ClusterRegistrationRequests(obj.Namespace).Update(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *clusterRegistrationRequestController) UpdateStatus(obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error) {
	return c.clientGetter.ClusterRegistrationRequests(obj.Namespace).UpdateStatus(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *clusterRegistrationRequestController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.clientGetter.ClusterRegistrationRequests(namespace).Delete(context.TODO(), name, *options)
}

func (c *clusterRegistrationRequestController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ClusterRegistrationRequest, error) {
	return c.clientGetter.ClusterRegistrationRequests(namespace).Get(context.TODO(), name, options)
}

func (c *clusterRegistrationRequestController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.ClusterRegistrationRequestList, error) {
	return c.clientGetter.ClusterRegistrationRequests(namespace).List(context.TODO(), opts)
}

func (c *clusterRegistrationRequestController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ClusterRegistrationRequests(namespace).Watch(context.TODO(), opts)
}

func (c *clusterRegistrationRequestController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterRegistrationRequest, err error) {
	return c.clientGetter.ClusterRegistrationRequests(namespace).Patch(context.TODO(), name, pt, data, metav1.PatchOptions{}, subresources...)
}

type clusterRegistrationRequestCache struct {
	lister  listers.ClusterRegistrationRequestLister
	indexer cache.Indexer
}

func (c *clusterRegistrationRequestCache) Get(namespace, name string) (*v1alpha1.ClusterRegistrationRequest, error) {
	return c.lister.ClusterRegistrationRequests(namespace).Get(name)
}

func (c *clusterRegistrationRequestCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.ClusterRegistrationRequest, error) {
	return c.lister.ClusterRegistrationRequests(namespace).List(selector)
}

func (c *clusterRegistrationRequestCache) AddIndexer(indexName string, indexer ClusterRegistrationRequestIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.ClusterRegistrationRequest))
		},
	}))
}

func (c *clusterRegistrationRequestCache) GetByIndex(indexName, key string) (result []*v1alpha1.ClusterRegistrationRequest, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.ClusterRegistrationRequest, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.ClusterRegistrationRequest))
	}
	return result, nil
}

type ClusterRegistrationRequestStatusHandler func(obj *v1alpha1.ClusterRegistrationRequest, status v1alpha1.ClusterRegistrationRequestStatus) (v1alpha1.ClusterRegistrationRequestStatus, error)

type ClusterRegistrationRequestGeneratingHandler func(obj *v1alpha1.ClusterRegistrationRequest, status v1alpha1.ClusterRegistrationRequestStatus) ([]runtime.Object, v1alpha1.ClusterRegistrationRequestStatus, error)

func RegisterClusterRegistrationRequestStatusHandler(ctx context.Context, controller ClusterRegistrationRequestController, condition condition.Cond, name string, handler ClusterRegistrationRequestStatusHandler) {
	statusHandler := &clusterRegistrationRequestStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterRegistrationRequestHandlerToHandler(statusHandler.sync))
}

func RegisterClusterRegistrationRequestGeneratingHandler(ctx context.Context, controller ClusterRegistrationRequestController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterRegistrationRequestGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterRegistrationRequestGeneratingHandler{
		ClusterRegistrationRequestGeneratingHandler: handler,
		apply: apply,
		name:  name,
		gvk:   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterClusterRegistrationRequestStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterRegistrationRequestStatusHandler struct {
	client    ClusterRegistrationRequestClient
	condition condition.Cond
	handler   ClusterRegistrationRequestStatusHandler
}

func (a *clusterRegistrationRequestStatusHandler) sync(key string, obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type clusterRegistrationRequestGeneratingHandler struct {
	ClusterRegistrationRequestGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterRegistrationRequestGeneratingHandler) Remove(key string, obj *v1alpha1.ClusterRegistrationRequest) (*v1alpha1.ClusterRegistrationRequest, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.ClusterRegistrationRequest{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *clusterRegistrationRequestGeneratingHandler) Handle(obj *v1alpha1.ClusterRegistrationRequest, status v1alpha1.ClusterRegistrationRequestStatus) (v1alpha1.ClusterRegistrationRequestStatus, error) {
	objs, newStatus, err := a.ClusterRegistrationRequestGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
