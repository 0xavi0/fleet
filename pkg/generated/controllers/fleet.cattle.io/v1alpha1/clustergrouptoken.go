/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	clientset "github.com/rancher/fleet/pkg/generated/clientset/versioned/typed/fleet.cattle.io/v1alpha1"
	informers "github.com/rancher/fleet/pkg/generated/informers/externalversions/fleet.cattle.io/v1alpha1"
	listers "github.com/rancher/fleet/pkg/generated/listers/fleet.cattle.io/v1alpha1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ClusterGroupTokenHandler func(string, *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error)

type ClusterGroupTokenController interface {
	generic.ControllerMeta
	ClusterGroupTokenClient

	OnChange(ctx context.Context, name string, sync ClusterGroupTokenHandler)
	OnRemove(ctx context.Context, name string, sync ClusterGroupTokenHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterGroupTokenCache
}

type ClusterGroupTokenClient interface {
	Create(*v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error)
	Update(*v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error)
	UpdateStatus(*v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ClusterGroupToken, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.ClusterGroupTokenList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterGroupToken, err error)
}

type ClusterGroupTokenCache interface {
	Get(namespace, name string) (*v1alpha1.ClusterGroupToken, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.ClusterGroupToken, error)

	AddIndexer(indexName string, indexer ClusterGroupTokenIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.ClusterGroupToken, error)
}

type ClusterGroupTokenIndexer func(obj *v1alpha1.ClusterGroupToken) ([]string, error)

type clusterGroupTokenController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ClusterGroupTokensGetter
	informer          informers.ClusterGroupTokenInformer
	gvk               schema.GroupVersionKind
}

func NewClusterGroupTokenController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ClusterGroupTokensGetter, informer informers.ClusterGroupTokenInformer) ClusterGroupTokenController {
	return &clusterGroupTokenController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromClusterGroupTokenHandlerToHandler(sync ClusterGroupTokenHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.ClusterGroupToken
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.ClusterGroupToken))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *clusterGroupTokenController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.ClusterGroupToken))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateClusterGroupTokenDeepCopyOnChange(client ClusterGroupTokenClient, obj *v1alpha1.ClusterGroupToken, handler func(obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error)) (*v1alpha1.ClusterGroupToken, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *clusterGroupTokenController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *clusterGroupTokenController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *clusterGroupTokenController) OnChange(ctx context.Context, name string, sync ClusterGroupTokenHandler) {
	c.AddGenericHandler(ctx, name, FromClusterGroupTokenHandlerToHandler(sync))
}

func (c *clusterGroupTokenController) OnRemove(ctx context.Context, name string, sync ClusterGroupTokenHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromClusterGroupTokenHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *clusterGroupTokenController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *clusterGroupTokenController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *clusterGroupTokenController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *clusterGroupTokenController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *clusterGroupTokenController) Cache() ClusterGroupTokenCache {
	return &clusterGroupTokenCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *clusterGroupTokenController) Create(obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error) {
	return c.clientGetter.ClusterGroupTokens(obj.Namespace).Create(context.TODO(), obj, metav1.CreateOptions{})
}

func (c *clusterGroupTokenController) Update(obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error) {
	return c.clientGetter.ClusterGroupTokens(obj.Namespace).Update(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *clusterGroupTokenController) UpdateStatus(obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error) {
	return c.clientGetter.ClusterGroupTokens(obj.Namespace).UpdateStatus(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *clusterGroupTokenController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.clientGetter.ClusterGroupTokens(namespace).Delete(context.TODO(), name, *options)
}

func (c *clusterGroupTokenController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ClusterGroupToken, error) {
	return c.clientGetter.ClusterGroupTokens(namespace).Get(context.TODO(), name, options)
}

func (c *clusterGroupTokenController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.ClusterGroupTokenList, error) {
	return c.clientGetter.ClusterGroupTokens(namespace).List(context.TODO(), opts)
}

func (c *clusterGroupTokenController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ClusterGroupTokens(namespace).Watch(context.TODO(), opts)
}

func (c *clusterGroupTokenController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterGroupToken, err error) {
	return c.clientGetter.ClusterGroupTokens(namespace).Patch(context.TODO(), name, pt, data, metav1.PatchOptions{}, subresources...)
}

type clusterGroupTokenCache struct {
	lister  listers.ClusterGroupTokenLister
	indexer cache.Indexer
}

func (c *clusterGroupTokenCache) Get(namespace, name string) (*v1alpha1.ClusterGroupToken, error) {
	return c.lister.ClusterGroupTokens(namespace).Get(name)
}

func (c *clusterGroupTokenCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.ClusterGroupToken, error) {
	return c.lister.ClusterGroupTokens(namespace).List(selector)
}

func (c *clusterGroupTokenCache) AddIndexer(indexName string, indexer ClusterGroupTokenIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.ClusterGroupToken))
		},
	}))
}

func (c *clusterGroupTokenCache) GetByIndex(indexName, key string) (result []*v1alpha1.ClusterGroupToken, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.ClusterGroupToken, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.ClusterGroupToken))
	}
	return result, nil
}

type ClusterGroupTokenStatusHandler func(obj *v1alpha1.ClusterGroupToken, status v1alpha1.ClusterGroupTokenStatus) (v1alpha1.ClusterGroupTokenStatus, error)

type ClusterGroupTokenGeneratingHandler func(obj *v1alpha1.ClusterGroupToken, status v1alpha1.ClusterGroupTokenStatus) ([]runtime.Object, v1alpha1.ClusterGroupTokenStatus, error)

func RegisterClusterGroupTokenStatusHandler(ctx context.Context, controller ClusterGroupTokenController, condition condition.Cond, name string, handler ClusterGroupTokenStatusHandler) {
	statusHandler := &clusterGroupTokenStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterGroupTokenHandlerToHandler(statusHandler.sync))
}

func RegisterClusterGroupTokenGeneratingHandler(ctx context.Context, controller ClusterGroupTokenController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterGroupTokenGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterGroupTokenGeneratingHandler{
		ClusterGroupTokenGeneratingHandler: handler,
		apply:                              apply,
		name:                               name,
		gvk:                                controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterClusterGroupTokenStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterGroupTokenStatusHandler struct {
	client    ClusterGroupTokenClient
	condition condition.Cond
	handler   ClusterGroupTokenStatusHandler
}

func (a *clusterGroupTokenStatusHandler) sync(key string, obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type clusterGroupTokenGeneratingHandler struct {
	ClusterGroupTokenGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterGroupTokenGeneratingHandler) Remove(key string, obj *v1alpha1.ClusterGroupToken) (*v1alpha1.ClusterGroupToken, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.ClusterGroupToken{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *clusterGroupTokenGeneratingHandler) Handle(obj *v1alpha1.ClusterGroupToken, status v1alpha1.ClusterGroupTokenStatus) (v1alpha1.ClusterGroupTokenStatus, error) {
	objs, newStatus, err := a.ClusterGroupTokenGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
