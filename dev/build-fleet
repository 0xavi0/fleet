#!/bin/bash
# Description: build fleet binary and image with debug flags

set -euxo pipefail

if [ ! -d ./cmd/fleetcontroller ]; then
  echo "please change the current directory to the fleet repo checkout"
  exit 1
fi

export GOARCH="${GOARCH:-amd64}"
export CGO_ENABLED=0

# re-generate code
if ! git diff --quiet HEAD origin/main --  pkg/apis/fleet.cattle.io/v1alpha1; then
  go generate
fi

export GOOS=linux

# The name of the container image created here is a potential source of conflict
# when fleet is set up simultaneously in multiple sets (i.e. 1 upstream + 0 to n
# downstream). build-fleet always creates a container image with the same name
# (`rancher/fleet`, rancher/fleet-agent`) and tag (`dev`). Conflicts can simply
# be avoided by making sure that the images `rancher/fleet:dev` and
# `rancher/fleet-agent:dev` are rebuilt from the right context (e.g. git clone,
# checkout or worktree) before being imported into clusters created for testing
# that context.  This can be easily achieved by ensuring that, for instance, at
# most one instance of `./dev/setup-single-cluster` or
# `./dev/setup-multi-cluster` runs at any given point in time.

# fleet
go build -gcflags='all=-N -l' -o "bin/fleet-linux-$GOARCH" ./cmd/fleetcli
go build -gcflags='all=-N -l' -o bin/fleetcontroller-linux-"$GOARCH" ./cmd/fleetcontroller
docker build -f package/Dockerfile -t rancher/fleet:dev --build-arg="ARCH=$GOARCH"  .

# fleet agent
go build -gcflags='all=-N -l' -o "bin/fleetagent-linux-$GOARCH" ./cmd/fleetagent
docker build -f package/Dockerfile.agent -t rancher/fleet-agent:dev --build-arg="ARCH=$GOARCH" .
